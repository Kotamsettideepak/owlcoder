// 300. Longest Increasing Subsequence
// Solved
// Medium
// Topics
// Companies
// Given an integer array nums, return the length of the longest strictly increasing 
// subsequence
// .

// Example 1:

// Input: nums = [10,9,2,5,3,7,101,18]
// Output: 4
// Explanation: The longest increasing subsequence is [2,3,7,101], therefore the length is 4.
// Example 2:

// Input: nums = [0,1,0,3,2,3]
// Output: 4
// Example 3:

// Input: nums = [7,7,7,7,7,7,7]
// Output: 1

// Constraints:

// 1 <= nums.length <= 2500
// -104 <= nums[i] <= 104

import java.util.*;

class Solution {
    public int lengthOfLIS(int[] nums) {
        int arr[] = new int[nums.length];
        Arrays.fill(arr, 1);
        int length = nums.length;
        int max = 0;
        int temp = 0;
        for (int i = 0; i < length; i++) {
            temp = 0;
            for (int j = 0; j < i; j++) {
                if (nums[j] < nums[i]) {
                    if (arr[j] > temp)
                        temp = arr[j];
                }
            }
            arr[i] += temp;
            if (max < arr[i])
                max = arr[i];
        }
        System.out.println(Arrays.toString(arr));
        return max;
    }
}
