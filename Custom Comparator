(* Creating our won comparator 

 *)

import java.util.Comparator;
import java.util.List;
import java.util.ArrayList;
import java.util.Collections;

class CustomComparator implements Comparator<Integer> {    // we hould take it as public
    @Override
    public int compare(Integer num1, Integer num2) {
        // Custom comparison logic
        return num1.compareTo(num2); // For example, sorting in ascending order
    }
}

public class CustomComparatorExample { 
    public static void main(String[] args) {
        List<Integer> numbers = new ArrayList<>();
        numbers.add(5);
        numbers.add(2);
        numbers.add(8);
        numbers.add(1);

        // Using the custom comparator
        Collections.sort(numbers, new CustomComparator());

        // Print the sorted list
        System.out.println("Sorted Numbers: " + numbers);
    }
}




(* 
 Another Example

To sort a list of Class by taking any parameter *)




import java.util.ArrayList;
import java.util.Collections;
import java.util.Comparator;
import java.util.List;

class Pair {
    int a, b, c;

    Pair(int a, int b, int c) {
        this.a = a;
        this.b = b;
        this.c = c;
    }

    int getA() {
        return a;
    }

    int getB() {
        return b;
    }

    int getC() {
        return c;
    }
}

class PairComparator implements Comparator<Pair> {
    @Override
    public int compare(Pair pair1, Pair pair2) {
        // Compare based on the 'b' value
        return Integer.compare(pair1.getB(), pair2.getB());
    }
}

public class PairComparatorExample {
    public static void main(String[] args) {
        List<Pair> pairs = new ArrayList<>();
        pairs.add(new Pair(1, 5, 9));
        pairs.add(new Pair(2, 3, 7));
        pairs.add(new Pair(3, 8, 4));

        // Using the custom comparator
        Collections.sort(pairs, new PairComparator());

        // Print the sorted list
        System.out.println("Sorted Pairs by 'b' value: " + pairs);
    }
}
